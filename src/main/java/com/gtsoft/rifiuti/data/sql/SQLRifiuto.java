/*
 * Created on 18-lug-2005
 *
 *	This is not free software - All rights reserved
 */

package com.gtsoft.rifiuti.data.sql;

import java.util.HashMap;
import java.util.Vector;

import com.gtsoft.rifiuti.data.Rifiuto;
import com.gtsoft.utils.DbValue;
import com.gtsoft.utils.superdata.IDatabase;
import com.gtsoft.utils.superdata.ISQLAdapter;

/**
 * @author Gtron - 
 * 
 */
public class SQLRifiuto extends ISQLAdapter {
    

	public SQLRifiuto() {
	   super();
	   this.table = TABLE ;
	}
	public SQLRifiuto( IDatabase d ) {
	    super(d);
	    this.table = TABLE ;
	}
	
    private static final int fieldsCount = 11 ;
    private static final String TABLE = "Rifiuti" ; 
    
    public Object getFromFields() { 
        int i = 0 ;
        
        Rifiuto o = new Rifiuto() ;
        
        DbValue field =  (DbValue) fields.get("ID") ; 
        if ( field != null ){
            try {
            o.setId( (field.getValue().toString() ) ) ;
            } 
            catch ( Exception e ) { e.printStackTrace() ; }
        }
        field = (DbValue) fields.get("CODICEQUADRELLI") ; 
        if ( field != null ){
            o.setCodiceQuadrelli( ((String) field.getValue()) ) ;
        }
        field = (DbValue) fields.get("CODICEQUADRELLIPADRE") ; 
        if ( field != null ){
            if ( field.getValue() != null )
                o.setCodiceQuadrelliPadre( ((Integer) field.getValue()).toString() ) ;
            else 
                o.setCodiceQuadrelliPadre( null ) ;
        }
        field = (DbValue) fields.get("NOME") ; 
        if ( field != null ){
            o.setNome( ((String) field.getValue()) ) ;
        }
        field = (DbValue) fields.get("UNITA") ; 
        if ( field != null ){
            o.setUnita( ((String) field.getValue()) ) ;
        }
        field = (DbValue) fields.get("CODICECER") ; 
        if ( field != null ){
            o.setCodiceCer( (String) field.getValue() ) ;
        }
        field = (DbValue) fields.get("STATOFISICO") ; 
        if ( field != null ){
            o.setCodiceStatoFisico( ((String) field.getValue()) ) ;
        }
        field = (DbValue) fields.get("CLASSIPERICOLOSITA") ; 
        if ( field != null ){
            o.setListaClassiPericolosita( ((String) field.getValue()) ) ;
        }
        field = (DbValue) fields.get("CODICIRECUPERO") ; 
        if ( field != null ){
            o.setCodiceRecupero( (String) field.getValue() ) ;
        }
        field = (DbValue) fields.get("PRODUTTORE") ; 
        if ( field != null ){
            o.setDescrizioneProduttore( (String) field.getValue() ) ;
        }
        field = (DbValue) fields.get("TIPO") ; 
        if ( field != null ){
            o.setTipo( (String) field.getValue() ) ;
        }
        field = (DbValue) fields.get("INTERMEDIARIO") ; 
        if ( field != null ){
            o.setIntermediario( (String) field.getValue() ) ;
        }
        
        return o ;

    }
    
    public void syncFields( Object obj ) throws Exception {
        Rifiuto o = (Rifiuto) obj ;
        
        HashMap list = getFields(true);
        ((DbValue) list.get("ID")).setValue( o.getId() ) ;
        ((DbValue) list.get("CODICEQUADRELLI")).setValue( o.getCodiceQuadrelli() ) ;
        ((DbValue) list.get("CODICEQUADRELLIPADRE")).setValue( o.getCodiceQuadrelliPadre() ) ;
        ((DbValue) list.get("NOME")).setValue( o.getNome() ) ;
        ((DbValue) list.get("UNITA")).setValue( o.getUnita() ) ;
        ((DbValue) list.get("CODICECER")).setValue( o.getCodiceCer() ) ;
        ((DbValue) list.get("STATOFISICO")).setValue( o.getCodiceStatoFisico() ) ;
        ((DbValue) list.get("CLASSIPERICOLOSITA")).setValue( o.getListaClassiPericolosita() ) ;
        ((DbValue) list.get("CODICIRECUPERO")).setValue( o.getCodiceRecupero() ) ;
        ((DbValue) list.get("PRODUTTORE")).setValue( o.getDescrizioneProduttore() ) ;
        ((DbValue) list.get("TIPO")).setValue( o.getTipo() ) ;
        ((DbValue) list.get("INTERMEDIARIO")).setValue( o.getIntermediario() ) ;

    }
    
    public String getCreateTable() {
        return "" ; /* CREATE CACHED TABLE " + table + 
        	" id integer GENERATED BY DEFAULT AS IDENTITY primary key , " +
        	" codiceQuadrelli integer ,  nome varchar , " +
        	" unita varchar(10), codiceCer varchar(25)," +
        	" statoFisico varchar( 10) , classiPericolosita varchar(60), " +
        	" codiciRecupero varchar(40) );" ; */
    }
    
    public String getTable() {
        return TABLE ;
    }
    
    public HashMap getFields( int dbType , boolean reload ) {
        return getFields(reload) ;
    }
    
    public HashMap getFields( boolean reload ) {

	    if ( reload || fields == null ) {
	        fields = new HashMap(fieldsCount);
	        
	        DbValue key =  new DbValue("ID", DbValue.INTEGER );
	        key.setKey(true);
	        fields.put("ID" , key ) ;
	    	
	    	fields.put("CODICEQUADRELLI", new DbValue("CODICEQUADRELLI", DbValue.STRING ));
	    	fields.put("CODICEQUADRELLIPADRE", new DbValue("QUADRELLIPADRE", DbValue.INTEGER ));
	    	fields.put("NOME", new DbValue("NOME", DbValue.STRING ));
	    	fields.put("PRODUTTORE", new DbValue("DESCRIZIONEPRODUTTORE", DbValue.STRING ));
	    	fields.put("UNITA", new DbValue("UNITA", DbValue.STRING ));
	    	fields.put("CODICECER", new DbValue("CODICECER", DbValue.STRING));
	    	fields.put("STATOFISICO", new DbValue("STATOFISICO", DbValue.STRING ));
	    	fields.put("CLASSIPERICOLOSITA", new DbValue("CLASSIPERICOLOSITA", DbValue.STRING ));
	    	fields.put("CODICIRECUPERO", new DbValue("CODICIRECUPERO", DbValue.STRING ));
	    	fields.put("TIPO", new DbValue("TIPO", DbValue.STRING ));
	    	
	    	fields.put("INTERMEDIARIO", new DbValue("INTERMEDIARIO", DbValue.STRING ));	         
	    }
        return fields;
    }
    
    public void delete() throws Exception {
    	Vector k = new Vector(1) ;
    	k.add( fields.get("ID")) ;
    	
    	db.backup("Cancellazione_rifiuto_" + ((DbValue) fields.get("CODICEQUADRELLI")).getValue()) ;
    	delete ( k );
    }
    
    public Rifiuto get( String codice ) throws Exception {

        HashMap fields = getFields(true);
        
        DbValue d = (DbValue) fields.get("CODICEQUADRELLI") ;
        d.setValue(codice);
        
        Rifiuto r = null ;
        try {
            r = (Rifiuto) get( d ).get(0) ;
        }
        catch( Exception e ) { }
        
        return r ;
    }
    
    public Vector filterForCerCode(String codiceCer) throws Exception {
        return get(new DbValue("CodiceCer",codiceCer,DbValue.STRING));
        
    }
}